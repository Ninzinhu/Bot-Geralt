const mongoose = require('mongoose');
const { config } = require('dotenv');

// Carregar vari√°veis de ambiente
config();

async function testMongoDBConnection() {
    console.log('üîç Testando conex√£o com MongoDB...\n');

    const mongoUri = process.env.MONGODB_URI;
    
    if (!mongoUri) {
        console.log('‚ùå MONGODB_URI n√£o configurada!');
        console.log('üìã Configure a vari√°vel MONGODB_URI no seu .env');
        return;
    }

    console.log('üìã URI do MongoDB:');
    console.log(mongoUri.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')); // Oculta credenciais
    console.log('');

    try {
        console.log('üîÑ Tentando conectar...');
        
        // Configurar timeout de conex√£o
        const connectionOptions = {
            serverSelectionTimeoutMS: 10000, // 10 segundos
            socketTimeoutMS: 45000, // 45 segundos
            connectTimeoutMS: 10000, // 10 segundos
        };

        await mongoose.connect(mongoUri, connectionOptions);
        
        console.log('‚úÖ Conex√£o com MongoDB estabelecida com sucesso!');
        console.log('üìä Informa√ß√µes da conex√£o:');
        console.log(`   - Host: ${mongoose.connection.host}`);
        console.log(`   - Port: ${mongoose.connection.port}`);
        console.log(`   - Database: ${mongoose.connection.name}`);
        console.log(`   - Ready State: ${mongoose.connection.readyState}`);
        
        // Testar opera√ß√£o b√°sica
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log(`   - Collections: ${collections.length}`);
        
        console.log('\nüéâ MongoDB est√° funcionando perfeitamente!');
        
    } catch (error) {
        console.log('‚ùå Erro ao conectar com MongoDB:');
        console.log('');
        
        if (error.name === 'MongooseServerSelectionError') {
            console.log('üîç Tipo de erro: Server Selection Error');
            console.log('üìã Poss√≠veis causas:');
            console.log('   1. IP n√£o liberado no MongoDB Atlas');
            console.log('   2. Credenciais incorretas');
            console.log('   3. Cluster offline ou em manuten√ß√£o');
            console.log('   4. Firewall bloqueando conex√£o');
            console.log('');
            console.log('üõ†Ô∏è Solu√ß√µes:');
            console.log('   1. Libere o IP 0.0.0.0/0 no MongoDB Atlas');
            console.log('   2. Verifique usu√°rio e senha');
            console.log('   3. Teste a URI no MongoDB Compass');
            console.log('   4. Verifique se o cluster est√° ativo');
        } else if (error.name === 'MongoParseError') {
            console.log('üîç Tipo de erro: Parse Error');
            console.log('üìã Poss√≠vel causa: URI malformada');
            console.log('üõ†Ô∏è Solu√ß√£o: Verifique a sintaxe da MONGODB_URI');
        } else if (error.name === 'MongoNetworkError') {
            console.log('üîç Tipo de erro: Network Error');
            console.log('üìã Poss√≠vel causa: Problema de rede');
            console.log('üõ†Ô∏è Solu√ß√£o: Verifique sua conex√£o de internet');
        } else {
            console.log(`üîç Tipo de erro: ${error.name}`);
            console.log(`üìã Mensagem: ${error.message}`);
        }
        
        console.log('');
        console.log('üìã Detalhes t√©cnicos:');
        console.log(`   - Nome do erro: ${error.name}`);
        console.log(`   - C√≥digo: ${error.code || 'N/A'}`);
        console.log(`   - Mensagem: ${error.message}`);
        
        if (error.reason) {
            console.log(`   - Raz√£o: ${error.reason}`);
        }
        
    } finally {
        // Fechar conex√£o
        if (mongoose.connection.readyState === 1) {
            await mongoose.connection.close();
            console.log('\nüîå Conex√£o fechada.');
        }
    }
}

// Executar teste
testMongoDBConnection().catch(console.error); 