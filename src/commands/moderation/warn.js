const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('warn')
        .setDescription('Gerencia avisos de usu√°rios')
        .addSubcommand(subcommand =>
            subcommand
                .setName('adicionar')
                .setDescription('Adiciona um aviso a um usu√°rio')
                .addUserOption(option =>
                    option.setName('usuario')
                        .setDescription('Usu√°rio a ser avisado')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('motivo')
                        .setDescription('Motivo do aviso')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('listar')
                .setDescription('Lista avisos de um usu√°rio')
                .addUserOption(option =>
                    option.setName('usuario')
                        .setDescription('Usu√°rio para ver avisos')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remover')
                .setDescription('Remove um aviso espec√≠fico')
                .addStringOption(option =>
                    option.setName('id')
                        .setDescription('ID do aviso a ser removido')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('limpar')
                .setDescription('Remove todos os avisos de um usu√°rio')
                .addUserOption(option =>
                    option.setName('usuario')
                        .setDescription('Usu√°rio para limpar avisos')
                        .setRequired(true)))
        .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers),

    async execute(interaction, database) {
        try {
            await interaction.deferReply();

            const subcommand = interaction.options.getSubcommand();

            switch (subcommand) {
                case 'adicionar':
                    await this.addWarn(interaction, database);
                    break;
                case 'listar':
                    await this.listWarns(interaction, database);
                    break;
                case 'remover':
                    await this.removeWarn(interaction, database);
                    break;
                case 'limpar':
                    await this.clearWarns(interaction, database);
                    break;
            }

        } catch (error) {
            console.error('‚ùå Erro no comando warn:', error);
            await interaction.editReply({
                content: '‚ùå Houve um erro ao executar o comando. Tente novamente.',
                ephemeral: true
            });
        }
    },

    async addWarn(interaction, database) {
        const targetUser = interaction.options.getUser('usuario');
        const targetMember = interaction.options.getMember('usuario');
        const reason = interaction.options.getString('motivo');

        // Verifica√ß√µes
        if (!targetMember) {
            return interaction.editReply({
                content: '‚ùå Este usu√°rio n√£o est√° no servidor.',
                ephemeral: true
            });
        }

        if (targetMember.id === interaction.user.id) {
            return interaction.editReply({
                content: '‚ùå Voc√™ n√£o pode avisar a si mesmo.',
                ephemeral: true
            });
        }

        if (targetMember.id === interaction.client.user.id) {
            return interaction.editReply({
                content: '‚ùå Voc√™ n√£o pode avisar o bot.',
                ephemeral: true
            });
        }

        if (interaction.member.roles.highest.position <= targetMember.roles.highest.position) {
            return interaction.editReply({
                content: '‚ùå Voc√™ n√£o pode avisar algu√©m com cargo igual ou superior ao seu.',
                ephemeral: true
            });
        }

        // Adicionar aviso (simulado por enquanto)
        const warnId = `warn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        // Embed de confirma√ß√£o
        const warnEmbed = new EmbedBuilder()
            .setTitle('‚ö†Ô∏è Aviso Adicionado')
            .setColor('#FFA500')
            .setThumbnail(targetUser.displayAvatarURL())
            .addFields(
                { name: 'üë§ Usu√°rio', value: `${targetUser.tag} (${targetUser.id})`, inline: true },
                { name: 'üõ°Ô∏è Avisado por', value: interaction.user.tag, inline: true },
                { name: 'üìÖ Data', value: new Date().toLocaleString('pt-BR'), inline: true },
                { name: 'üìù Motivo', value: reason, inline: false },
                { name: 'üÜî ID do Aviso', value: warnId, inline: true }
            )
            .setTimestamp()
            .setFooter({ text: 'Sistema de Modera√ß√£o - NihonTech' });

        await interaction.editReply({ embeds: [warnEmbed] });

        // Log da a√ß√£o
        const logChannelId = process.env.LOG_CHANNEL_ID;
        if (logChannelId) {
            const logChannel = interaction.guild.channels.cache.get(logChannelId);
            if (logChannel) {
                const logEmbed = new EmbedBuilder()
                    .setTitle('üìã Log de Modera√ß√£o - Aviso')
                    .setColor('#FFA500')
                    .addFields(
                        { name: 'üë§ Usu√°rio Avisado', value: `${targetUser.tag} (${targetUser.id})`, inline: true },
                        { name: 'üõ°Ô∏è Moderador', value: interaction.user.tag, inline: true },
                        { name: 'üìù Motivo', value: reason, inline: false },
                        { name: 'üìç Canal', value: interaction.channel.name, inline: true }
                    )
                    .setTimestamp();

                await logChannel.send({ embeds: [logEmbed] });
            }
        }

        // Notificar o usu√°rio
        try {
            const userEmbed = new EmbedBuilder()
                .setTitle('‚ö†Ô∏è Voc√™ Recebeu um Aviso')
                .setColor('#FFA500')
                .setDescription(`Voc√™ recebeu um aviso no servidor **${interaction.guild.name}**.`)
                .addFields(
                    { name: 'üõ°Ô∏è Moderador', value: interaction.user.tag, inline: true },
                    { name: 'üìÖ Data', value: new Date().toLocaleString('pt-BR'), inline: true },
                    { name: 'üìù Motivo', value: reason, inline: false }
                )
                .setTimestamp()
                .setFooter({ text: 'Sistema de Modera√ß√£o - NihonTech' });

            await targetUser.send({ embeds: [userEmbed] });
        } catch (error) {
            // Usu√°rio tem DMs bloqueadas
        }
    },

    async listWarns(interaction, database) {
        const targetUser = interaction.options.getUser('usuario');

        // Simular lista de avisos (em implementa√ß√£o real, viria do banco)
        const warns = [
            {
                id: 'warn_1234567890_abc123',
                reason: 'Spam no chat',
                moderator: 'Moderador#1234',
                date: new Date(Date.now() - 86400000) // 1 dia atr√°s
            },
            {
                id: 'warn_1234567891_def456',
                reason: 'Linguagem inadequada',
                moderator: 'Admin#5678',
                date: new Date(Date.now() - 172800000) // 2 dias atr√°s
            }
        ];

        if (warns.length === 0) {
            return interaction.editReply({
                content: `‚úÖ ${targetUser.tag} n√£o possui avisos.`,
                ephemeral: true
            });
        }

        const embed = new EmbedBuilder()
            .setTitle(`üìã Avisos de ${targetUser.tag}`)
            .setColor('#3498DB')
            .setThumbnail(targetUser.displayAvatarURL())
            .setDescription(`Total de avisos: **${warns.length}**`)
            .setTimestamp();

        warns.forEach((warn, index) => {
            embed.addFields({
                name: `‚ö†Ô∏è Aviso #${index + 1}`,
                value: `**ID:** ${warn.id}\n**Motivo:** ${warn.reason}\n**Moderador:** ${warn.moderator}\n**Data:** ${warn.date.toLocaleString('pt-BR')}`,
                inline: false
            });
        });

        await interaction.editReply({ embeds: [embed] });
    },

    async removeWarn(interaction, database) {
        const warnId = interaction.options.getString('id');

        // Simular remo√ß√£o de aviso
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ Aviso Removido')
            .setColor('#00FF00')
            .setDescription(`O aviso **${warnId}** foi removido com sucesso.`)
            .addFields(
                { name: 'üõ°Ô∏è Removido por', value: interaction.user.tag, inline: true },
                { name: 'üìÖ Data', value: new Date().toLocaleString('pt-BR'), inline: true }
            )
            .setTimestamp();

        await interaction.editReply({ embeds: [embed] });

        // Log da a√ß√£o
        const logChannelId = process.env.LOG_CHANNEL_ID;
        if (logChannelId) {
            const logChannel = interaction.guild.channels.cache.get(logChannelId);
            if (logChannel) {
                const logEmbed = new EmbedBuilder()
                    .setTitle('üìã Log de Modera√ß√£o - Aviso Removido')
                    .setColor('#00FF00')
                    .addFields(
                        { name: 'üÜî ID do Aviso', value: warnId, inline: true },
                        { name: 'üõ°Ô∏è Moderador', value: interaction.user.tag, inline: true },
                        { name: 'üìç Canal', value: interaction.channel.name, inline: true }
                    )
                    .setTimestamp();

                await logChannel.send({ embeds: [logEmbed] });
            }
        }
    },

    async clearWarns(interaction, database) {
        const targetUser = interaction.options.getUser('usuario');
        const targetMember = interaction.options.getMember('usuario');

        // Verifica√ß√µes
        if (!targetMember) {
            return interaction.editReply({
                content: '‚ùå Este usu√°rio n√£o est√° no servidor.',
                ephemeral: true
            });
        }

        if (interaction.member.roles.highest.position <= targetMember.roles.highest.position) {
            return interaction.editReply({
                content: '‚ùå Voc√™ n√£o pode limpar avisos de algu√©m com cargo igual ou superior ao seu.',
                ephemeral: true
            });
        }

        // Simular limpeza de avisos
        const embed = new EmbedBuilder()
            .setTitle('üßπ Avisos Limpos')
            .setColor('#00FF00')
            .setThumbnail(targetUser.displayAvatarURL())
            .setDescription(`Todos os avisos de **${targetUser.tag}** foram removidos.`)
            .addFields(
                { name: 'üë§ Usu√°rio', value: `${targetUser.tag} (${targetUser.id})`, inline: true },
                { name: 'üõ°Ô∏è Limpo por', value: interaction.user.tag, inline: true },
                { name: 'üìÖ Data', value: new Date().toLocaleString('pt-BR'), inline: true }
            )
            .setTimestamp();

        await interaction.editReply({ embeds: [embed] });

        // Log da a√ß√£o
        const logChannelId = process.env.LOG_CHANNEL_ID;
        if (logChannelId) {
            const logChannel = interaction.guild.channels.cache.get(logChannelId);
            if (logChannel) {
                const logEmbed = new EmbedBuilder()
                    .setTitle('üìã Log de Modera√ß√£o - Avisos Limpos')
                    .setColor('#00FF00')
                    .addFields(
                        { name: 'üë§ Usu√°rio', value: `${targetUser.tag} (${targetUser.id})`, inline: true },
                        { name: 'üõ°Ô∏è Moderador', value: interaction.user.tag, inline: true },
                        { name: 'üìç Canal', value: interaction.channel.name, inline: true }
                    )
                    .setTimestamp();

                await logChannel.send({ embeds: [logEmbed] });
            }
        }
    }
}; 